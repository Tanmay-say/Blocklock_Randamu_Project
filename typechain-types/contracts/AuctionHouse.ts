/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AuctionHouseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SELLER_ROLE"
      | "addSeller"
      | "auctions"
      | "commitBid"
      | "createAuction"
      | "emergencyWithdraw"
      | "emergencyWithdrawNFT"
      | "finalize"
      | "fulfillRandomness"
      | "getAuction"
      | "getBidder"
      | "getBidderCount"
      | "getDeposit"
      | "getRoleAdmin"
      | "grantRole"
      | "hasBid"
      | "hasRole"
      | "onBlocklockDecryption"
      | "onERC721Received"
      | "owner"
      | "randamuVRF"
      | "removeSeller"
      | "renounceOwnership"
      | "renounceRole"
      | "requestTieBreakRandomness"
      | "revokeRole"
      | "supportsInterface"
      | "transferOwnership"
      | "winnerSBT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionCreated"
      | "AuctionFinalized"
      | "BidCommitted"
      | "BidRevealed"
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TieBreakRandomnessFulfilled"
      | "TieBreakRandomnessRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSeller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBid",
    values: [BigNumberish, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomness",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onBlocklockDecryption",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randamuVRF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTieBreakRandomness",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "winnerSBT", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBidder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onBlocklockDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "randamuVRF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTieBreakRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winnerSBT", data: BytesLike): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    nft: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    reserve: BigNumberish,
    endBlock: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    nft: string,
    tokenId: bigint,
    seller: string,
    reserve: bigint,
    endBlock: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    nft: string;
    tokenId: bigint;
    seller: string;
    reserve: bigint;
    endBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionFinalizedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [auctionId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    auctionId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidCommittedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidIndex: BigNumberish,
    bidder: AddressLike,
    ciphertext: BytesLike,
    condition: BytesLike,
    deposit: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidIndex: bigint,
    bidder: string,
    ciphertext: string,
    condition: string,
    deposit: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidIndex: bigint;
    bidder: string;
    ciphertext: string;
    condition: string;
    deposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidRevealedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [auctionId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TieBreakRandomnessFulfilledEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    requestId: BigNumberish,
    randomness: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    requestId: bigint,
    randomness: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    requestId: bigint;
    randomness: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TieBreakRandomnessRequestedEvent {
  export type InputTuple = [auctionId: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [auctionId: bigint, requestId: bigint];
  export interface OutputObject {
    auctionId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctionHouse extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionHouse;
  waitForDeployment(): Promise<this>;

  interface: AuctionHouseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SELLER_ROLE: TypedContractMethod<[], [string], "view">;

  addSeller: TypedContractMethod<[seller: AddressLike], [void], "nonpayable">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        bigint
      ] & {
        nft: string;
        tokenId: bigint;
        reserve: bigint;
        endBlock: bigint;
        depositPct: bigint;
        seller: string;
        settled: boolean;
        winner: string;
        winningBid: bigint;
      }
    ],
    "view"
  >;

  commitBid: TypedContractMethod<
    [
      auctionId: BigNumberish,
      ciphertext: BytesLike,
      condition: BytesLike,
      refundTo: AddressLike
    ],
    [void],
    "payable"
  >;

  createAuction: TypedContractMethod<
    [
      nft: AddressLike,
      tokenId: BigNumberish,
      reserve: BigNumberish,
      endBlock: BigNumberish,
      depositPct: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdrawNFT: TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalize: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fulfillRandomness: TypedContractMethod<
    [requestId: BigNumberish, randomness: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        bigint,
        bigint
      ] & {
        nft: string;
        tokenId: bigint;
        reserve: bigint;
        endBlock: bigint;
        seller: string;
        settled: boolean;
        winner: string;
        winningBid: bigint;
        bidderCount: bigint;
      }
    ],
    "view"
  >;

  getBidder: TypedContractMethod<
    [auctionId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  getBidderCount: TypedContractMethod<
    [auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  getDeposit: TypedContractMethod<
    [auctionId: BigNumberish, bidder: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasBid: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  onBlocklockDecryption: TypedContractMethod<
    [
      auctionId: BigNumberish,
      bidder: AddressLike,
      amount: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  randamuVRF: TypedContractMethod<[], [string], "view">;

  removeSeller: TypedContractMethod<
    [seller: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestTieBreakRandomness: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  winnerSBT: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SELLER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSeller"
  ): TypedContractMethod<[seller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        bigint
      ] & {
        nft: string;
        tokenId: bigint;
        reserve: bigint;
        endBlock: bigint;
        depositPct: bigint;
        seller: string;
        settled: boolean;
        winner: string;
        winningBid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitBid"
  ): TypedContractMethod<
    [
      auctionId: BigNumberish,
      ciphertext: BytesLike,
      condition: BytesLike,
      refundTo: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      nft: AddressLike,
      tokenId: BigNumberish,
      reserve: BigNumberish,
      endBlock: BigNumberish,
      depositPct: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawNFT"
  ): TypedContractMethod<
    [nft: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfillRandomness"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomness: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        string,
        boolean,
        string,
        bigint,
        bigint
      ] & {
        nft: string;
        tokenId: bigint;
        reserve: bigint;
        endBlock: bigint;
        seller: string;
        settled: boolean;
        winner: string;
        winningBid: bigint;
        bidderCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidder"
  ): TypedContractMethod<
    [auctionId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidderCount"
  ): TypedContractMethod<[auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<
    [auctionId: BigNumberish, bidder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasBid"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "onBlocklockDecryption"
  ): TypedContractMethod<
    [
      auctionId: BigNumberish,
      bidder: AddressLike,
      amount: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randamuVRF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSeller"
  ): TypedContractMethod<[seller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestTieBreakRandomness"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "winnerSBT"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionFinalized"
  ): TypedContractEvent<
    AuctionFinalizedEvent.InputTuple,
    AuctionFinalizedEvent.OutputTuple,
    AuctionFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "BidCommitted"
  ): TypedContractEvent<
    BidCommittedEvent.InputTuple,
    BidCommittedEvent.OutputTuple,
    BidCommittedEvent.OutputObject
  >;
  getEvent(
    key: "BidRevealed"
  ): TypedContractEvent<
    BidRevealedEvent.InputTuple,
    BidRevealedEvent.OutputTuple,
    BidRevealedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TieBreakRandomnessFulfilled"
  ): TypedContractEvent<
    TieBreakRandomnessFulfilledEvent.InputTuple,
    TieBreakRandomnessFulfilledEvent.OutputTuple,
    TieBreakRandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "TieBreakRandomnessRequested"
  ): TypedContractEvent<
    TieBreakRandomnessRequestedEvent.InputTuple,
    TieBreakRandomnessRequestedEvent.OutputTuple,
    TieBreakRandomnessRequestedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,address,uint256,address,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionFinalized(uint256,address,uint256)": TypedContractEvent<
      AuctionFinalizedEvent.InputTuple,
      AuctionFinalizedEvent.OutputTuple,
      AuctionFinalizedEvent.OutputObject
    >;
    AuctionFinalized: TypedContractEvent<
      AuctionFinalizedEvent.InputTuple,
      AuctionFinalizedEvent.OutputTuple,
      AuctionFinalizedEvent.OutputObject
    >;

    "BidCommitted(uint256,uint256,address,bytes,bytes,uint256)": TypedContractEvent<
      BidCommittedEvent.InputTuple,
      BidCommittedEvent.OutputTuple,
      BidCommittedEvent.OutputObject
    >;
    BidCommitted: TypedContractEvent<
      BidCommittedEvent.InputTuple,
      BidCommittedEvent.OutputTuple,
      BidCommittedEvent.OutputObject
    >;

    "BidRevealed(uint256,address,uint256)": TypedContractEvent<
      BidRevealedEvent.InputTuple,
      BidRevealedEvent.OutputTuple,
      BidRevealedEvent.OutputObject
    >;
    BidRevealed: TypedContractEvent<
      BidRevealedEvent.InputTuple,
      BidRevealedEvent.OutputTuple,
      BidRevealedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TieBreakRandomnessFulfilled(uint256,uint256,uint256)": TypedContractEvent<
      TieBreakRandomnessFulfilledEvent.InputTuple,
      TieBreakRandomnessFulfilledEvent.OutputTuple,
      TieBreakRandomnessFulfilledEvent.OutputObject
    >;
    TieBreakRandomnessFulfilled: TypedContractEvent<
      TieBreakRandomnessFulfilledEvent.InputTuple,
      TieBreakRandomnessFulfilledEvent.OutputTuple,
      TieBreakRandomnessFulfilledEvent.OutputObject
    >;

    "TieBreakRandomnessRequested(uint256,uint256)": TypedContractEvent<
      TieBreakRandomnessRequestedEvent.InputTuple,
      TieBreakRandomnessRequestedEvent.OutputTuple,
      TieBreakRandomnessRequestedEvent.OutputObject
    >;
    TieBreakRandomnessRequested: TypedContractEvent<
      TieBreakRandomnessRequestedEvent.InputTuple,
      TieBreakRandomnessRequestedEvent.OutputTuple,
      TieBreakRandomnessRequestedEvent.OutputObject
    >;
  };
}
